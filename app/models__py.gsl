.template 0
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# Authors:
# Caner Candan <caner@candan.fr>, http://caner.candan.fr
#

app_context_import("models")

new o.stmt as s
  define s. = "from django.db import models"
endnew s
new o.stmt as s
  define s. = "from django.conf import settings"
endnew s
new o.stmt as s
  define s. = "from django.utils.translation import ugettext_lazy as _"
endnew s
new o.stmt as s
  define s. = "from django.core.urlresolvers import reverse, reverse_lazy"
endnew s
new o.stmt as s
  define s. = "from django.contrib.contenttypes import generic"
endnew s
new o.stmt as s
  define s. = "from django.contrib.contenttypes.models import ContentType"
endnew s
new o.stmt as s
  define s. = "from select_multiple_field.models import SelectMultipleField"
endnew s
new o.newline as nl
endnew nl

function create_operations(model)
  for my.model.operation as op
    if op.type = "count"
      new c.stmt as s
        define s. = "$(op.name) = models.PositiveIntegerField(_('$(op.name)'))"
      endnew s
    endif
  endfor op
endfunction create_operations

function pre_create_model(model)
endfunction pre_create_model

function post_create_model(model)
  gsl from "app/models/fields_post.gsl"
  gsl from "app/models/save_post.gsl"
  gsl from "app/models/display_post.gsl"
endfunction post_create_model

for projectnode.model as m
  for m.inline as i
    new i.field as f
      define f.type = "foreignkey"
      define f.model = m.name
    endnew
    new o.class as c
      define c.name = '$(m.name:)$(i.name:)'
      define c.inherits = 'models.Model'
      post_create_model(i)
    endnew c
  endfor i

  new o.class as c
    define c.name = '$(m.name:)'
    define c.inherits = 'models.Model'
    if defined(m.plural)
      new c.subclass as meta
        define meta.name = "Meta"
        new meta.stmt as s
          define s. = "verbose_name_plural = _('$(m.plural)')"
        endnew s
      endnew meta
    endif
    post_create_model(m)
  endnew c
endfor m

for projectnode.view as m
  new o.class as c
    define c.name = 'View$(m.name:)'
    define c.inherits = 'admin.Model'
    create_operations(m)
    post_create_model(m)
  endnew c
endfor m

app_context_add_code("models", "content")

.endtemplate