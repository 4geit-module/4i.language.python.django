.template 0
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# Authors:
# Caner Candan <caner@candan.fr>, http://caner.candan.fr
#

new o.stmt as s
  define s. = "from django.db import models"
endnew s

new o.stmt as s
  define s. = "from django.conf import settings"
endnew s

new o.stmt as s
  define s. = "from django.utils.translation import ugettext_lazy as _"
endnew s

new o.stmt as s
  define s. = "from django.core.urlresolvers import reverse, reverse_lazy"
endnew s

new o.stmt as s
  define s. = "from django.contrib.contenttypes import generic"
endnew s

new o.stmt as s
  define s. = "from django.contrib.contenttypes.models import ContentType"
endnew s

new o.stmt as s
  define s. = "from select_multiple_field.models import SelectMultipleField"
endnew s

new o.newline as nl
endnew nl

function create_fields(model)
  for my.model.field as f
    my.options = ""

    if defined(f.nodata) & f.nodata = "True"
      my.options += ", blank=True, null=True"
    endif

    if defined(f.nodelete) & f.nodelete = "True"
      my.options += ", on_delete=models.SET_NULL"
    endif

    if defined(f.unique) & f.unique = "True"
      my.options += ", unique=True"
    endif

    if defined(f.index) & f.index = "True"
      my.options += ", db_index=True"
    endif

    if defined(f.autonowadd) & f.autonowadd = "True"
      my.options += ", auto_now_add=True"
    endif

    if defined(f.autonow) & f.autonow = "True"
      my.options += ", auto_now=True"
    endif

    if defined(f.default)
      my.options += ", default=$(f.default:)"
    endif

    gsl from "app/models/fields/$(f.type).gsl"
  endfor f

  if defined(my.model.progressbar) & my.model.progressbar = "True"
    new c.stmt as s
      define s. = "progress = models.IntegerField(_('progress'), blank=True, null=True)"
    endnew s
  endif
endfunction create_fields

function create_operations(model)
  for my.model.operation as op
    if op.type = "count"
      new c.stmt as s
        define s. = "$(op.name) = models.PositiveIntegerField(_('$(op.name)'))"
      endnew s
    endif
  endfor op
endfunction create_operations

function create_display(model)
  new c.def as d
    define d.name = "__unicode__"
    new d.arg as a
      define a.name = "self"
    endnew
    new d.stmt as s
      if defined(my.model.display)
        define s. = "return unicode(self.$(my.model.display))"
      else
        define s. = "return \"\"\"$(my.model.name:) (%d)\"\"\" % self.id"
      endif
    endnew s
  endnew d
endfunction create_display

function create_save(model)
  if defined(my.ctx.progressbar) & my.ctx.progressbar = "True"
    new c.def as d
      define d.name = "__progressbar"
      new d.arg as a
        define a.name = "self"
      endnew
      new d.stmt as s
        define s. = "progress = 0."
      endnew s
      new d.stmt as s
        define s. = "size = $(count(m.field))"
      endnew s

      for m.inline as i
        new d.stmt as s
          define s. = "size += self.$(m.name)$(i.name)_set.count() * $(count(i.field))"
        endnew s
        new d.stmt as s
          define s. = "for item in self.$(m.name)$(i.name)_set.all():"
        endnew s

        for i.field as f
          new d.stmt as s
            define s. = "    if item.$(f.name?f.model:lower): progress += 100./size"
          endnew
        endfor f
      endfor i

      for m.field as f
        new d.stmt as s
          define s. = "if self.$(f.name): progress += 100./size"
        endnew
      endfor f

      new d.stmt as s
        define s. = "return int(round(progress))"
      endnew
    endnew d
  endif

  new c.def as d
    define d.name = "save"
    new d.arg as a
      define a.name = "self"
    endnew
    new d.arg as a
      define a.name = "*args"
    endnew
    new d.arg as a
      define a.name = "**kwargs"
    endnew
    if defined(my.model.progressbar) & my.model.progressbar = "True"
      new d.stmt as s
        define s. = "self.progress = self.__progressbar()"
      endnew s
    endif
    new d.stmt as s
      define s. = "super($(my.model.name:), self).save(*args, **kwargs)"
    endnew s
  endnew d
endfunction create_save

function pre_create_model(model)

endfunction pre_create_model

function post_create_model(model)
  create_fields(my.model)
  create_save(my.model)
  create_display(my.model)
endfunction post_create_model

for projectnode.model as m
  for m.inline as i
    new o.class as c
      define c.name = '$(m.name:)$(i.name:)'
      define c.inherits = 'models.Model'
      post_create_model(i)
    endnew c
  endfor i

  new o.class as c
    define c.name = '$(m.name:)'
    define c.inherits = 'models.Model'
    if defined(m.plural)
      new c.stmt as s
        define s. = "class Meta:"
      endnew
      new c.stmt as s
        define s. = "    verbose_name_plural = _('$(m.plural)')"
      endnew
    endif
    post_create_model(m)
  endnew c
endfor m

.endtemplate